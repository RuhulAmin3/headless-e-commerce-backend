generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  products    Product[]
  slug        String    @unique
  images      String[]  @default([])
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Product {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String @unique

  description String?

  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  variants   Variant[]

  images String[] @default([])

  isFeatured Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Variant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  name      String
  price     Float
  stock     Int     @default(0)
  isDefault Boolean @default(false)

  CartItem CartItem[]

  OrderItem OrderItem[]

  @@map("variants")
}

model Cart {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  token   String     @unique
  items   CartItem[]
  promo   Promo?     @relation(fields: [promoId], references: [id])
  promoId String?    @db.ObjectId

  expiresAt DateTime // Auto-expire carts after X days

  subtotal       Float @default(0)
  discountAmount Float @default(0)
  total          Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  cart       Cart    @relation(fields: [cartId], references: [id])
  cartId     String  @db.ObjectId
  variant    Variant @relation(fields: [variantId], references: [id])
  variantId  String  @db.ObjectId
  quantity   Int     @default(1)
  unitPrice  Float
  totalPrice Float

  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, variantId]) // Prevent duplicate variants in same cart
  @@map("cart_items")
}

model Promo {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  code  String    @unique // e.g., "SUMMER21"
  type  PromoType
  value Float

  usageLimit Int? // Total usage limit
  usageCount Int  @default(0)

  minimumAmount Float? // Minimum order amount to apply promo
  maximumAmount Float? // Maximum discount amount

  status PromoStatus @default(ACTIVE) // active, inactive, expired

  validFrom DateTime
  validTo   DateTime

  Cart Cart[]

  Order Order[]

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  @@map("promos")
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderNumber String @unique

  items   OrderItem[]
  promo   Promo?      @relation(fields: [promoId], references: [id])
  promoId String?     @db.ObjectId

  subtotal       Float
  discountAmount Float @default(0)

  total Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  
  id String @id @default(auto()) @map("_id") @db.ObjectId

  order Order @relation(fields: [orderId], references: [id])

  orderId String @db.ObjectId

  variant Variant @relation(fields: [variantId], references: [id])

  variantId String @db.ObjectId

  quantity Int

  unitPrice Float // Price at time of order

  totalPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

enum PromoType {
  PERCENT
  FIXED
}

enum PromoStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}
