generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  images      String[] @default([])
  description String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  images      String[] @default([])
  isFeatured  Boolean  @default(false)

  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String    @db.ObjectId
  variants   Variant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Variant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float
  stock     Int     @default(0)
  isDefault Boolean @default(false)

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  CartItem CartItem[]
  OrderItem OrderItem[]

  @@map("variants")
}

model Cart {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  token   String     @unique
  items   CartItem[]
  promo   Promo?     @relation(fields: [promoId], references: [id], onDelete: Cascade)
  promoId String?    @db.ObjectId

  expiresAt DateTime

  subtotal       Float @default(0)
  discountAmount Float @default(0)
  total          Float @default(0)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity Int @default(1)

  unitPrice Float

  totalPrice Float

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String   @db.ObjectId
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String   @db.ObjectId
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, variantId]) // Prevent duplicate variants in same cart
  @@map("cart_items")
}

model Promo {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  code          String    @unique
  type          PromoType
  value         Float
  usageLimit    Int?
  usageCount    Int       @default(0)
  minimumAmount Float?
  uptoDiscount  Float?

  status    PromoStatus @default(ACTIVE)
  validFrom DateTime
  validTo   DateTime

  Cart  Cart[]
  Order Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("promos")
}

model Order {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber    String      @unique
  token          String      
  items          OrderItem[]
  total          Float
  status         OrderStatus @default(PENDING)
  promoId        String?     @db.ObjectId
  promo          Promo?      @relation(fields: [promoId], references: [id])
  subtotal       Float
  discountAmount Float       @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String  @db.ObjectId
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @db.ObjectId
  quantity  Int
  price     Float

  @@map("order_items")
}

enum PromoType {
  PERCENT
  FIXED
}

enum PromoStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum OrderStatus {
  PENDING      
  PAID         
  SHIPPED      
  DELIVERED    
  CANCELLED   
}
